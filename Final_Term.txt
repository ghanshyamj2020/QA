1) Write a macro for each of the following. DO NOT provide a function ... I am looking for a macro (see last set of lecture notes).

a) Area of a Circle
b) Area of a Square
c) Area of a Rectangle
d) Area of a Triangle
You can find formulas and detailed explanations at: http://www.mathisfun.com

Ans:
1.
a. #define circleArea(r) (3.1415*(r)*(r))
b. #define squareArea(r) ((4)*(r))
c. #define RectangleArea(l,b) (l*b)
d. #define TriangleArea(h,b) ((l*b)/2)
------------------------------------------------------------------------------------------------------------------------------
2) Write a function which will determine how many words are in a given string. You can assume that one or more
consecutive white spaces is a delimiter between words, and that the string you pass to your function is null terminated.

Ans: 
#include <stdio.h>  
#include <string.h>  

void stringcount(char sentence[]);   
int main()  
{  
    
     
    char sentence[] = "Beauty lies in the eyes of beholder";  
    stringcount(sentence);
    
 return 0;   
}    

void stringcount(char sentence[]){    
    int wordCount = 0;  
      
    for(int i = 0; i < strlen(sentence)-1; i++) {  
        //Counts all the spaces present in the string  
        //It doesn't include the first space as it won't be considered as a word  
        if(sentence[i] == ' ' || sentence[i]=='\n' || sentence[i] =='\t' ) {  
            wordCount++;  
        }  
    }    
    //To count the last word present in the string, increment wordCount by 1  
    wordCount++;  
      
    //Displays the total number of words present in the given string  
    printf("Total number of words in the given string: %d", wordCount);  
   
      
} 
--------------------------------------------------------------------------------------------------------------------------
3) Write a function that is passed a month, day, and year and will determine if
that date is valid. You can assume each parameter is passed in as an integer.
Remember to check for leap year!
validDate (5, 31, 1961) .... would be valid
validDate (13, 4, 1967) ... would be invalid, the month is invalid

Ans:

#include <stdio.h>
// function declaration to check date , month ,year validation
  
void datecalc(int dd, int mm, int yy); 
int main()
{
    int dd,mm,yy;
     
    printf("Enter date (DD/MM/YYYY format): ");
    scanf("%d/%d/%d",&dd,&mm,&yy);

    datecalc(dd, mm, yy);

    return 0;
}    
     
// function to check date , month , year validation

void datecalc(int dd , int mm ,int yy) {     
    //check year
    if(yy>=1900 && yy<=9999)
    {
        //check month
        if(mm>=1 && mm<=12)
        {
            //check days
            if((dd>=1 && dd<=31) && (mm==1 || mm==3 || mm==5 || mm==7 || mm==8 || mm==10 || mm==12))
                printf("Date is valid.\n");
            else if((dd>=1 && dd<=30) && (mm==4 || mm==6 || mm==9 || mm==11))
                printf("Date is valid.\n");
            else if((dd>=1 && dd<=28) && (mm==2))
                printf("Date is valid.\n");
            else if(dd==29 && mm==2 && (yy%400==0 ||(yy%4==0 && yy%100!=0)))
                printf("Date is valid.\n");
            else
                printf("Day is invalid.\n");
        }
        else
        {
            printf("Month is not valid.\n");
        }
    }
    else
    {
        printf("Year is not valid.\n");
    }
     
}
-------------------------------------------------------------------------------
4) Write a function that takes the values of a two-card blackjack HAND as input, and returns the point total of the hand. The value
of the cards '2' through '9' is equal to their face value, the cards 'T', 'K', 'Q', 'J' are worth 10 points and the ace ('A') is worth 11 points
unless it comes with another ace, then that second ace is worth 1 point. The program should be able to catch incorrect input.
Enter cards: A Q
The score is 21
Enter cards: A A
The score is 12
Enter cards: T 7
The score is 17
Enter cards: A 5
The score is 16
Enter cards: 7 #
*** Would be invalid, # is not a valid card
Enter cards: Z 4
*** Would be invalid, Z is not a valid card

Ans:

#include <stdio.h>

int calculate_std_score(char card){
   
if(49 < (int) card && (int) card < 58)
      return (card - '0');
   /* check for all the figures whose value is 10 */
   if(card == 'T' || card == 'J' || card == 'Q' || card == 'K')
      return 10;
   /* we already checked the particular case of (A,A);
       Now the card A can only have 11 as value */ 
   if(card == 'A')
      return 11;
   /* error: unrecognized character; we ensure to obtain always a negative sum */
   return -22;
}

int calculate_total_score(char card1, char card2){
  /* check (A,A) case : the ASCII decimal value of char 'A' is  65 */ 
  if((int) card1 + (int) card2 == 130)
     return 11;/* (A,A) = 10 + 1 */
  /* calculate the standard sum of the 2 card values */
  int result= calculate_std_score(card1) + calculate_std_score(card2);
  /* check erroneous result */ 
  if(result < 0)
     return -1;
  /* return standard result : no error detected */
  return result;
}

// main function
int main(void) {
    char card1 = 'A';
    char card2 = 'Q';
    printf("%i\n", calculate_total_score(card1, card2));
    return 0;
}

-----------------------------------------------------------------------------------------------------------------------------
5) Write a function to determine is a given word is legal. A word is illegal if it contains no vowels. For this problem,
the letter Y is considered to be a legal vowel. Pass in a word to this function and it will determine if the word is
legal or not. You can make the following assumptions about the word you a passing to this function.
1) The string being passed is a combination of letters only (no non-letter check needed)
2) The string being passed is null terminated
3) Letters may be capital or lower case and it has no effect on whether its a word
Examples:
sch - is illegal, no vowels
apple - legal, contains a vowel
APPle - legal, uppercase letter combinations do not matter
try - legal, no vowel, but contains the letter 'y'

Ans:
#include <string.h>
 
int main()
{
    char s[1000];  
    int i,vowels=0,consonants=0;
 
    printf("Enter  the string : ");
    gets(s);
     
    for(i=0;s[i];i++)  
    {
    	if((s[i]>=65 && s[i]<=90)|| (s[i]>=97 && s[i]<=122))
    	{
		
            if(s[i]=='a'|| s[i]=='e'||s[i]=='i'||s[i]=='o'||s[i]=='u'||s[i]=='A'||s[i]=='E'||s[i]=='I'||s[i]=='O' ||s[i]=='U')
		      vowels++;
            else
             consonants++;
        }
 
 	}
 	
     if (vowels > 0) {
        printf("legal");
     } 
     else {
         printf("illegal");
     }
    return 0;
}
-------------------------------------------------------------------------------------------------------------------------------
6) Write a function that will determine if a given string is a palindrome. DO NOT use the C library function: strrev
A palindrome is a word or sentence that reads the same forward as it does backward.
Examples of word palindromes would be civic or rotor ... a word or phase would be:
Never odd or even
A good web site of examples is: http://www.rinkworks.com/words/palindromes.shtml

Ans:

#include <stdio.h>
#include <string.h>

// A function to check if a string str is palindrome
void isPalindrome(char str[])
{
	// Start from leftmost and rightmost corners of str
	int l = 0;
	int h = strlen(str) - 1;

	// Keep comparing characters while they are same
	while (h > l)
	{
		if (str[l++] != str[h--])
		{
			printf("%s is not a palindrome\n", str);
			return;
		}
	}
	printf("%s is a palindrome\n", str);
}

// main program
int main()
{
	isPalindrome("abba");   // call function
	isPalindrome("abbccbba"); // call function
	isPalindrome("geeks");  // call function
	return 0;
}

-------------------------------------------------------------------------------------------------------------------------------
7) Write a function that will return in a structure the following characteristics of a given string:

1) string length (use strlen),
2) number of upper case characters
3) number of lower case characters,
4) number of digits
5) number of blank spaces
6) number of non-alphanumeric characters.

Ans:
#include <stdio.h>
struct countf
{
char Str[100];    
int  stn1 ;
int  uc;
int  lc;
int  dc;
int  bs;
};
// declare function 
struct countf charfun(struct countf st);

// main function
int main()
{
struct countf st;
st.stn1 =0;
printf("Enter the String: ");
scanf("%s", st.Str);
	
st = charfun(st); // call function to calculate lenght, upper, lower, digit and blank space

printf(" main %d", st.stn1);    
return 0;
}

struct countf charfun(struct countf st) {
 int i , j , upper, lower, digit, space = 0  ;   
 
 //Length of string
 
 for (j = 0; st.Str[j] != '\0'; j++);
    
 
 //upper and lower char of string
 for (i = 0;st.Str[i]!= '\0'; i++) {
  if(st.Str[i]>='A' && st.Str[i]<='Z'){
    upper++;
}
else if(st.Str[i]>='a' && st.Str[i]<='z'){
    lower++;
}
else if(st.Str[i]>='0' && st.Str[i]<='9')
        {
            digit++;
        }
else if(st.Str[i]==' '){
        space++;
    }        
}
printf("Length of Str is %d\n", j);
printf("lowercase letters:   %d",lower);
printf("\nuppercase letters: %d",upper);
printf("\n Digit           : %d",digit);
printf("\n Digit           : %d",space);
 st.stn1 = j;
 st.uc = upper;
 st.lc = lower;
 st.dc= digit;
 st.bs = space;
 return(st);
}


-----------------------------------------------------------------------------------------------------------------------------
8) Develop a set of function(s) to compute various offensive statistics on baseball. The following information
will be available on each player:
Number of Walks (BB), Strike Outs (SO), Hit by Pitch (HP), Sac Flys (SF), Singles,
Doubles (2B), Triples (3B), and Home Runs (HR) as well as Number of At Bats (AB).
Based on this information, develop a set of functions that will compute the following:

Total Bases, Batting Average, Home Run Ratio, Strike Out Ratio, On Base Percentage, and Slugging Average.

Ans:
#include <stdio.h>
int BB = 1;
int SO = 10;
int HP= 10;
int SF= 3 ;
int SI = 1 ;
int B = 2;
int HR = 10; 
int AB = 2;

int baseball(int BB, int SO, int HP, int SF, int SI, int B, int HR, int AB);

int main()
{
    baseball(BB, SO, HP, SF, SI, B, HR, AB);
    
    return 0;
}

int baseball(int BB, int SO, int HP, int SF, int SI, int B, int HR, int AB){
// Batting Average = Number of Hits (divided by) Number of At Bats    
    int BattingAverage = HP/ AB;
    printf("Batting Average - %d\n", BattingAverage);
//Home Run Ratio = Number of Home Runs Hit (divided by) Number of At Bats    
    int HomeRunRatio = HR / AB;
    printf("Home Run Ratio - %d\n", HomeRunRatio);
//Strike Out Ratio = Number of Strikeouts (divided by) Number of At Bats    
    int StrikeOutRatio = SO/AB;
    printf("Strike Out Ratio - %d\n", StrikeOutRatio);
//Base Percentage = (Hits + Walks + Hit-By-Pitch) divided by (At Bats + Walks+ Hit-By-Pitch)
    int BasePercentage = (HP + BB + BB)/(AB + BB + HP);
    printf("Base Percentage - %d\n", BasePercentage);
//Slugging Average = Number of (Singles + [2 x Doubles] +[ 3 x Triples] + [4 x Home Runs]) divided by At Bats    
    int SluggingAverage = (SI + (2 * B)+ (3 * B) + (4 * HR))/AB;
    printf("Slugging Average - %d\n", SluggingAverage);

return 0;    
}
----------------------------------------------------------------------------------------------------------------------------

9) Most people enjoy watching movies these days, whether its the classics or modern ones.
Develop a set of structures that could be used to model the information about a movie collection.
What type of information would you want to collect and store about a movie? What would be the right
types in C for that information? Define supporting structures as needed and have one final structure type that
is made up of various members (some members may be on some structure type, others may be simple integers,
floats, chars, arrays, etc).
No program is needed although you might want to create a simple main function
and include your structure types just to test that everything compiles.
This question is similar to the final question on the midterm, but you have learned about many different
types since then. Here is a template to use to get started and indicates what I am looking for in your answer.
Use everything you learned this semester, especially types from the last set of lectures notes.

Ans:
struct title {
      char name[20];  
};

struct Rleasedate{
   int month;
   int date ;
   int year; 
}

struct movie {
    struct title movietitle;
    struct Rleasedate movieRleasedate;
    int  movieRating;
    float moviebusiness;
    char moviestart[100];
} ;

int main ( )
{
struct movie myMovie [1000];
return (0);
};